import { ClientProps, ClientConfig } from './config';
import { CreateFileResponse } from './gen';
import { ApiClient as AutoGeneratedClient, CreateFileProps } from './gen/client';
export { isApiError } from './gen/errors';
export * as axios from 'axios';
export type { Message, Conversation, User, State, Event, ModelFile as File, Bot, Integration, Issue, IssueEvent, Account, Workspace, Usage, } from './gen';
export * from './gen/errors';
export declare class Client extends AutoGeneratedClient {
    readonly config: Readonly<ClientConfig>;
    private readonly axiosClient;
    constructor(clientProps?: ClientProps);
    createFile: (props: CreateFileProps) => Promise<CreateFileResponse>;
}
type Simplify<T> = {
    [KeyType in keyof T]: Simplify<T[KeyType]>;
} & {};
type PickMatching<T, V> = {
    [K in keyof T as T[K] extends V ? K : never]: T[K];
};
type ExtractMethods<T> = PickMatching<T, (...rest: any[]) => any>;
type FunctionNames = keyof ExtractMethods<Client>;
export type ClientParams<T extends FunctionNames> = Simplify<Parameters<Client[T]>[0]>;
export type ClientReturn<T extends FunctionNames> = Simplify<Awaited<ReturnType<Client[T]>>>;
